{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f0\fs26 \cf0 #include <iostream>\
#include <vector>\
#include <list>\
#include <queue>\
#include <limits>\
#include <fstream>\
#include <chrono>\
\
using namespace std;\
\
class Graph \{\
    int V; // Number of vertices\
    vector<list<pair<int, int>>> adj; // Adjacency list\
\
public:\
    Graph(int V) : V(V), adj(V) \{\}\
\
    void addEdge(int u, int v, int w) \{\
        adj[u].emplace_back(v, w);\
    \}\
\
    void readGraphFromFile(const string &filename) \{\
        ifstream file(filename);\
        if (!file) \{\
            cerr << "Error opening file!" << endl;\
            return;\
        \}\
        int u, v, w;\
        while (file >> u >> v >> w) \{\
            addEdge(u, v, w);\
        \}\
    \}\
\
    vector<int> dijkstra(int src) \{\
        vector<int> dist(V, numeric_limits<int>::max());\
        dist[src] = 0;\
\
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\
        pq.emplace(0, src);\
\
        while (!pq.empty()) \{\
            int u = pq.top().second;\
            pq.pop();\
\
            for (const auto &neighbor : adj[u]) \{\
                int v = neighbor.first;\
                int weight = neighbor.second;\
\
                if (dist[u] + weight < dist[v]) \{\
                    dist[v] = dist[u] + weight;\
                    pq.emplace(dist[v], v);\
                \}\
            \}\
        \}\
        return dist;\
    \}\
\
    vector<int> bellmanFord(int src) \{\
        vector<int> dist(V, numeric_limits<int>::max());\
        dist[src] = 0;\
\
        for (int i = 1; i <= V - 1; ++i) \{\
            for (int u = 0; u < V; ++u) \{\
                for (const auto &neighbor : adj[u]) \{\
                    int v = neighbor.first;\
                    int weight = neighbor.second;\
\
                    if (dist[u] != numeric_limits<int>::max() && dist[u] + weight < dist[v]) \{\
                        dist[v] = dist[u] + weight;\
                    \}\
                \}\
            \}\
        \}\
\
        // Check for negative-weight cycles\
        for (int u = 0; u < V; ++u) \{\
            for (const auto &neighbor : adj[u]) \{\
                int v = neighbor.first;\
                int weight = neighbor.second;\
\
                if (dist[u] != numeric_limits<int>::max() && dist[u] + weight < dist[v]) \{\
                    cerr << "Graph contains negative weight cycle" << endl;\
                \}\
            \}\
        \}\
\
        return dist;\
    \}\
\};\
\
int main() \{\
    int V = 5;\
    Graph g(V);\
\
    g.readGraphFromFile("graph.txt");\
\
    int src = 0;\
\
    auto start = chrono::high_resolution_clock::now();\
    vector<int> distDijkstra = g.dijkstra(src);\
    auto end = chrono::high_resolution_clock::now();\
    chrono::duration<double> dijkstraTime = end - start;\
\
    start = chrono::high_resolution_clock::now();\
    vector<int> distBellmanFord = g.bellmanFord(src);\
    end = chrono::high_resolution_clock::now();\
    chrono::duration<double> bellmanFordTime = end - start;\
\
    cout << "Dijkstra's Algorithm:" << endl;\
    for (int i = 0; i < V; ++i) \{\
        cout << "Distance from " << src << " to " << i << " is " << distDijkstra[i] << endl;\
    \}\
    cout << "Time taken: " << dijkstraTime.count() << " seconds" << endl;\
\
    cout << "\\nBellman-Ford Algorithm:" << endl;\
    for (int i = 0; i < V; ++i) \{\
        cout << "Distance from " << src << " to " << i << " is " << distBellmanFord[i] << endl;\
    \}\
    cout << "Time taken: " << bellmanFordTime.count() << " seconds" << endl;\
\
    return 0;\
\}\
}