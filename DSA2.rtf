{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <iostream>\
using namespace std;\
\
class AVLNode \{\
public:\
    int key;\
    AVLNode* left;\
    AVLNode* right;\
    int height;\
\
    AVLNode(int k) : key(k), left(nullptr), right(nullptr), height(1) \{\}\
\};\
\
int height(AVLNode* node) \{\
    return node ? node->height : 0;\
\}\
\
int getBalance(AVLNode* node) \{\
    return node ? height(node->left) - height(node->right) : 0;\
\}\
\
AVLNode* rightRotate(AVLNode* y) \{\
    AVLNode* x = y->left;\
    AVLNode* T2 = x->right;\
\
    x->right = y;\
    y->left = T2;\
\
    y->height = max(height(y->left), height(y->right)) + 1;\
    x->height = max(height(x->left), height(x->right)) + 1;\
\
    return x;\
\}\
\
AVLNode* leftRotate(AVLNode* x) \{\
    AVLNode* y = x->right;\
    AVLNode* T2 = y->left;\
\
    y->left = x;\
    x->right = T2;\
\
    x->height = max(height(x->left), height(x->right)) + 1;\
    y->height = max(height(y->left), height(y->right)) + 1;\
\
    return y;\
\}\
\
AVLNode* insert(AVLNode* node, int key) \{\
    if (!node) return new AVLNode(key);\
\
    if (key < node->key)\
        node->left = insert(node->left, key);\
    else if (key > node->key)\
        node->right = insert(node->right, key);\
    else\
        return node;\
\
    node->height = 1 + max(height(node->left), height(node->right));\
\
    int balance = getBalance(node);\
\
    if (balance > 1 && key < node->left->key)\
        return rightRotate(node);\
\
    if (balance < -1 && key > node->right->key)\
        return leftRotate(node);\
\
    if (balance > 1 && key > node->left->key) \{\
        node->left = leftRotate(node->left);\
        return rightRotate(node);\
    \}\
\
    if (balance < -1 && key < node->right->key) \{\
        node->right = rightRotate(node->right);\
        return leftRotate(node);\
    \}\
\
    return node;\
\}\
\
AVLNode* minValueNode(AVLNode* node) \{\
    AVLNode* current = node;\
    while (current->left)\
        current = current->left;\
    return current;\
\}\
\
AVLNode* deleteNode(AVLNode* root, int key) \{\
    if (!root) return root;\
\
    if (key < root->key)\
        root->left = deleteNode(root->left, key);\
    else if (key > root->key)\
        root->right = deleteNode(root->right, key);\
    else \{\
        if (!root->left || !root->right) \{\
            AVLNode* temp = root->left ? root->left : root->right;\
\
            if (!temp) \{\
                temp = root;\
                root = nullptr;\
            \} else\
                *root = *temp;\
\
            delete temp;\
        \} else \{\
            AVLNode* temp = minValueNode(root->right);\
            root->key = temp->key;\
            root->right = deleteNode(root->right, temp->key);\
        \}\
    \}\
\
    if (!root) return root;\
\
    root->height = 1 + max(height(root->left), height(root->right));\
\
    int balance = getBalance(root);\
\
    if (balance > 1 && getBalance(root->left) >= 0)\
        return rightRotate(root);\
\
    if (balance > 1 && getBalance(root->left) < 0) \{\
        root->left = leftRotate(root->left);\
        return rightRotate(root);\
    \}\
\
    if (balance < -1 && getBalance(root->right) <= 0)\
        return leftRotate(root);\
\
    if (balance < -1 && getBalance(root->right) > 0) \{\
        root->right = rightRotate(root->right);\
        return leftRotate(root);\
    \}\
\
    return root;\
\}\
\
AVLNode* search(AVLNode* root, int key) \{\
    if (!root || root->key == key)\
        return root;\
\
    if (root->key < key)\
        return search(root->right, key);\
\
    return search(root->left, key);\
\}\
\
void inOrder(AVLNode* root) \{\
    if (root) \{\
        inOrder(root->left);\
        cout << root->key << " ";\
        inOrder(root->right);\
    \}\
\}\
\
void preOrder(AVLNode* root) \{\
    if (root) \{\
        cout << root->key << " ";\
        preOrder(root->left);\
        preOrder(root->right);\
    \}\
\}\
\
void postOrder(AVLNode* root) \{\
    if (root) \{\
        postOrder(root->left);\
        postOrder(root->right);\
        cout << root->key << " ";\
    \}\
\}\
\
int main() \{\
    AVLNode* root = nullptr;\
\
    // Insert nodes\
    root = insert(root, 10);\
    root = insert(root, 20);\
    root = insert(root, 30);\
    root = insert(root, 40);\
    root = insert(root, 50);\
    root = insert(root, 25);\
\
    cout << "Inorder traversal: ";\
    inOrder(root);\
    cout << endl;\
\
    cout << "Preorder traversal: ";\
    preOrder(root);\
    cout << endl;\
\
    cout << "Postorder traversal: ";\
    postOrder(root);\
    cout << endl;\
\
    // Delete a node\
    root = deleteNode(root, 20);\
\
    cout << "Inorder traversal after deletion: ";\
    inOrder(root);\
    cout << endl;\
\
    // Search for a node\
    int key = 30;\
    AVLNode* result = search(root, key);\
    if (result)\
        cout << "Node " << key << " found in the AVL tree." << endl;\
    else\
        cout << "Node " << key << " not found in the AVL tree." << endl;\
\
    return 0;\
\}\
}